{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","poster","this","props","title","rating","genres","map","genre","index","Movie_MovieGenres","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","torrents","Movie_Torrents","url","Component","Torrents","href","MovieGenres","MoviePoster","src","alt","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca008faa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport propTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\nclass Movie extends Component{\n    static propTypes = {\n        title: propTypes.string.isRequired,\n        poster: propTypes.string.isRequired,\n        synopsis: propTypes.string.isRequired\n    }\n    render(){\n       return(\n           <div className=\"Movie\">\n                <div className=\"Movie__Column Movie_poster_wrap\">\n                    <MoviePoster poster={this.props.poster} title={this.props.title}/>\n                </div>\n                <div className=\"Movie__Column\">\n                     <h3>rating {this.props.rating}</h3>\n                    <h1>{this.props.title}</h1>\n                    <div className=\"Movie__Genres\">\n                         {this.props.genres.map ((genre, index) => <MovieGenres genres={genre} key={index} /> )}\n                    </div>\n                    <div className=\"Movie__Synopsis\">\n                       <LinesEllipsis\n                        text={this.props.synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        />   \n                    </div>\n                    <div className=\"Movie__torrents__title\">\n                        Torrent Download link\n                    </div>\n                    <ul className=\"Movie__torrents\">\n                     {this.props.torrents.map ((torrents, index) => <Torrents torrents={torrents.url} key={index} index={index} /> )}\n                    </ul>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\n\nclass Torrents extends Component{\n    render(){\n\n        return(\n            <li><a className=\"Movie__torrents__Link\" href={this.props.torrents}>Link{this.props.index+1} </a> </li>\n        )\n    }    \n}\n\nclass MovieGenres extends Component{\n    static propTypes = {\n        genres: propTypes.string.isRequired\n    }\n    render(){\n        return(\n            <span className=\"Movie__Genre\">{this.props.genres}  </span>\n        )\n    }    \n}\n\n\nclass MoviePoster extends Component {\n    static propTypes = {\n        title: propTypes.string.isRequired,\n        poster: propTypes.string.isRequired\n    }\n    render(){\n        return(\n            <img src={this.props.poster} alt={this.props.title} title={this.props.title} className=\"Movie__Poster\" />\n        )\n    }    \n}\n\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\t// Render : componentWillMount() -> render() -> componentDidMount()\n\t// Update : componentWillReceiveProps() -> shouldComponentUpdate()-> componentWillUpdate() -> render() -> componentDidUpdate()\n\n\tstate = {};\n\n\tcomponentDidMount() {\n\t\tthis._getMovies();\n\t}\n\n\t_renderMovies = () => {\n\t\tconst movies = this.state.movies.map(movie => {\n\t\t\treturn (\n\t\t\t\t<Movie\n\t\t\t\t\ttitle={movie.title_english}\n\t\t\t\t\tposter={movie.medium_cover_image}\n\t\t\t\t\tkey={movie.id}\n\t\t\t\t\tgenres={movie.genres}\n\t\t\t\t\tsynopsis={movie.synopsis}\n\t\t\t\t\ttorrents={movie.torrents}\n\t\t\t\t\trating={movie.rating}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\treturn movies;\n\t};\n\n\t_getMovies = async () => {\n\t\tconst movies = await this._callApi();\n\t\tthis.setState({\n\t\t\tmovies\n\t\t});\n\t};\n\n\t_callApi = () => {\n\t\treturn fetch('https://yts-proxy.now.sh/list_movies.json?sort_by=rating')\n\t\t\t.then(response => response.json())\n\t\t\t.then(json => json.data.movies)\n\t\t\t.catch(err => console.log(err));\n\t};\n\n\trender() {\n\t\tconst { movies } = this.state;\n\t\treturn (\n\t\t\t<div className={movies ? 'App' : 'App--loading'}>\n\t\t\t\t{this.state.movies ? this._renderMovies() : 'Loading'}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}