{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","poster","this","props","title","rating","genres","map","genre","index","Movie_MovieGenres","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","torrents","Movie_Torrents","url","Component","Torrents","href","MovieGenres","MoviePoster","src","alt","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9822257b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport propTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component{\r\n    static propTypes = {\r\n        title: propTypes.string.isRequired,\r\n        poster: propTypes.string.isRequired,\r\n        synopsis: propTypes.string.isRequired\r\n    }\r\n    render(){\r\n       return(\r\n           <div className=\"Movie\">\r\n                <div className=\"Movie__Column Movie_poster_wrap\">\r\n                    <MoviePoster poster={this.props.poster} title={this.props.title}/>\r\n                </div>\r\n                <div className=\"Movie__Column\">\r\n                     <h3>rating {this.props.rating}</h3>\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                         {this.props.genres.map ((genre, index) => <MovieGenres genres={genre} key={index} /> )}\r\n                    </div>\r\n                    <div className=\"Movie__Synopsis\">\r\n                       <LinesEllipsis\r\n                        text={this.props.synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                        />   \r\n                    </div>\r\n                    <div className=\"Movie__torrents__title\">\r\n                        Torrent Download link\r\n                    </div>\r\n                    <ul className=\"Movie__torrents\">\r\n                     {this.props.torrents.map ((torrents, index) => <Torrents torrents={torrents.url} key={index} index={index} /> )}\r\n                    </ul>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass Torrents extends Component{\r\n    render(){\r\n\r\n        return(\r\n            <li><a className=\"Movie__torrents__Link\" href={this.props.torrents}>Link{this.props.index+1} </a> </li>\r\n        )\r\n    }    \r\n}\r\n\r\nclass MovieGenres extends Component{\r\n    static propTypes = {\r\n        genres: propTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <span className=\"Movie__Genre\">{this.props.genres}  </span>\r\n        )\r\n    }    \r\n}\r\n\r\n\r\nclass MoviePoster extends Component {\r\n    static propTypes = {\r\n        title: propTypes.string.isRequired,\r\n        poster: propTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt={this.props.title} title={this.props.title} className=\"Movie__Poster\" />\r\n        )\r\n    }    \r\n}\r\n\r\n\r\nexport default Movie;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass App extends Component {\r\n\t// Render : componentWillMount() -> render() -> componentDidMount()\r\n\t// Update : componentWillReceiveProps() -> shouldComponentUpdate()-> componentWillUpdate() -> render() -> componentDidUpdate()\r\n\r\n\tstate = {};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis._getMovies();\r\n\t}\r\n\r\n\t_renderMovies = () => {\r\n\t\tconst movies = this.state.movies.map((movie) => {\r\n\t\t\tconsole.log(movie);\r\n\t\t\treturn (\r\n\t\t\t\t<Movie\r\n\t\t\t\t\ttitle={movie.title_english}\r\n\t\t\t\t\tposter={movie.medium_cover_image}\r\n\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\tgenres={movie.genres}\r\n\t\t\t\t\tsynopsis={movie.synopsis}\r\n\t\t\t\t\ttorrents={movie.torrents}\r\n\t\t\t\t\trating={movie.rating}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn movies;\r\n\t};\r\n\r\n\t_getMovies = async () => {\r\n\t\tconst movies = await this._callApi();\r\n\t\tthis.setState({\r\n\t\t\tmovies,\r\n\t\t});\r\n\t};\r\n\r\n\t_callApi = () => {\r\n\t\treturn fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=rating\")\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((json) => json.data.movies)\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { movies } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className={movies ? \"App\" : \"App--loading\"}>\r\n\t\t\t\t{this.state.movies ? this._renderMovies() : \"Loading\"}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}